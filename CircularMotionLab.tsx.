import { useState, useEffect, useRef } from 'react'
import { Slider } from "/components/ui/slider"
import { Card, CardContent, CardHeader, CardTitle } from "/components/ui/card"
import { Button } from "/components/ui/button"
import { RefreshCw, Play, Pause, Plus, Minus } from 'lucide-react'

interface Ball {
  id: number
  radius: number
  angularVelocity: number
  time: number
  isFree: boolean
  color: string
  releaseTime: number
  releasePosition: { x: number; y: number }
  releaseVelocity: { x: number; y: number }
}

export default function CircularMotionLab() {
  // State for controls
  const [isPlaying, setIsPlaying] = useState(false)
  const [showFormulas, setShowFormulas] = useState(false)
  const [balls, setBalls] = useState<Ball[]>([
    {
      id: 1,
      radius: 100,
      angularVelocity: 1,
      time: 0,
      isFree: false,
      color: '#ef4444',
      releaseTime: 0,
      releasePosition: { x: 0, y: 0 },
      releaseVelocity: { x: 0, y: 0 }
    }
  ])

  // Refs for animation
  const animationRef = useRef<number>()
  const lastTimeRef = useRef<number>(0)
  const nextId = useRef(2)
  const center = { x: 200, y: 200 }
  const svgSize = { width: 400, height: 400 }

  // Animation loop
  useEffect(() => {
    if (!isPlaying) {
      if (animationRef.current) {
        cancelAnimationFrame(animationRef.current)
      }
      return
    }

    const animate = (timestamp: number) => {
      if (!lastTimeRef.current) lastTimeRef.current = timestamp
      const deltaTime = (timestamp - lastTimeRef.current) / 1000 // Convert to seconds
      lastTimeRef.current = timestamp

      setBalls(prevBalls => 
        prevBalls.map(ball => ({
          ...ball,
          time: ball.time + deltaTime
        }))
      )
      animationRef.current = requestAnimationFrame(animate)
    }

    animationRef.current = requestAnimationFrame(animate)
    return () => {
      if (animationRef.current) {
        cancelAnimationFrame(animationRef.current)
      }
    }
  }, [isPlaying])

  // Reset simulation
  const resetSimulation = () => {
    setBalls(prevBalls => 
      prevBalls.map(ball => ({
        ...ball,
        time: 0,
        isFree: false,
        releaseTime: 0,
        releasePosition: { x: 0, y: 0 },
        releaseVelocity: { x: 0, y: 0 }
      }))
    )
    if (isPlaying) setIsPlaying(false)
  }

  // Add a new ball
  const addBall = () => {
    const colors = ['#ef4444', '#3b82f6', '#10b981', '#f59e0b', '#8b5cf6']
    const newBall: Ball = {
      id: nextId.current++,
      radius: 100,
      angularVelocity: 1,
      time: 0,
      isFree: false,
      color: colors[(nextId.current - 2) % colors.length],
      releaseTime: 0,
      releasePosition: { x: 0, y: 0 },
      releaseVelocity: { x: 0, y: 0 }
    }
    setBalls(prevBalls => [...prevBalls, newBall])
  }

  // Remove the last ball
  const removeBall = () => {
    if (balls.length > 1) {
      setBalls(prevBalls => prevBalls.slice(0, -1))
    }
  }

  // Release a specific ball with proper tangential velocity
  const releaseBall = (id: number) => {
    setBalls(prevBalls =>
      prevBalls.map(ball => {
        if (ball.id === id && !ball.isFree) {
          const angle = ball.angularVelocity * ball.time % (2 * Math.PI)
          const currentPosition = {
            x: center.x + ball.radius * Math.cos(angle),
            y: center.y + ball.radius * Math.sin(angle)
          }
          const tangentialVelocity = ball.radius * ball.angularVelocity
          return {
            ...ball,
            isFree: true,
            releaseTime: ball.time,
            releasePosition: currentPosition,
            releaseVelocity: {
              x: -tangentialVelocity * Math.sin(angle),
              y: tangentialVelocity * Math.cos(angle)
            }
          }
        }
        return ball
      })
    )
  }

  // Update ball radius
  const updateBallRadius = (id: number, newRadius: number) => {
    setBalls(prevBalls =>
      prevBalls.map(ball =>
        ball.id === id && !ball.isFree ? { ...ball, radius: newRadius } : ball
      )
    )
  }

  // Update ball angular velocity
  const updateBallAngularVelocity = (id: number, newAngularVelocity: number) => {
    setBalls(prevBalls =>
      prevBalls.map(ball =>
        ball.id === id && !ball.isFree ? { ...ball, angularVelocity: newAngularVelocity } : ball
      )
    )
  }

  // Calculate ball position
  const getBallPosition = (ball: Ball) => {
    if (ball.isFree) {
      // Linear motion for free balls: x = x0 + vx*(t-t0), y = y0 + vy*(t-t0)
      const timeSinceRelease = ball.time - ball.releaseTime
      return {
        x: ball.releasePosition.x + ball.releaseVelocity.x * timeSinceRelease,
        y: ball.releasePosition.y + ball.releaseVelocity.y * timeSinceRelease
      }
    } else {
      // Circular motion for attached balls
      const angle = ball.angularVelocity * ball.time % (2 * Math.PI)
      return {
        x: center.x + ball.radius * Math.cos(angle),
        y: center.y + ball.radius * Math.sin(angle)
      }
    }
  }

  // Calculate velocity vector
  const getVelocityVector = (ball: Ball) => {
    if (ball.isFree) {
      return ball.releaseVelocity
    } else {
      const angle = ball.angularVelocity * ball.time % (2 * Math.PI)
      return {
        x: -ball.radius * ball.angularVelocity * Math.sin(angle),
        y: ball.radius * ball.angularVelocity * Math.cos(angle)
      }
    }
  }

  // Calculate derived values for a ball
  const getBallCalculations = (ball: Ball) => {
    const period = (2 * Math.PI) / ball.angularVelocity
    const frequency = 1 / period
    const tangentialVelocity = ball.radius * ball.angularVelocity
    const centripetalAcceleration = ball.radius * Math.pow(ball.angularVelocity, 2)
    const angle = ball.angularVelocity * ball.time % (2 * Math.PI)

    return {
      period,
      frequency,
      tangentialVelocity,
      centripetalAcceleration,
      angle
    }
  }

  // Render Cartesian plane with grid
  const renderCartesianPlane = () => {
    const gridSize = 20
    const gridColor = '#e5e7eb'
    const axisColor = '#6b7280'
    
    return (
      <>
        {/* Grid lines */}
        {Array.from({ length: Math.floor(svgSize.width / gridSize) }).map((_, i) => (
          <line
            key={`grid-x-${i}`}
            x1={i * gridSize}
            y1={0}
            x2={i * gridSize}
            y2={svgSize.height}
            stroke={gridColor}
            strokeWidth={1}
          />
        ))}
        {Array.from({ length: Math.floor(svgSize.height / gridSize) }).map((_, i) => (
          <line
            key={`grid-y-${i}`}
            x1={0}
            y1={i * gridSize}
            x2={svgSize.width}
            y2={i * gridSize}
            stroke={gridColor}
            strokeWidth={1}
          />
        ))}
        
        {/* X and Y axes */}
        <line
          x1={0}
          y1={center.y}
          x2={svgSize.width}
          y2={center.y}
          stroke={axisColor}
          strokeWidth={2}
        />
        <line
          x1={center.x}
          y1={0}
          x2={center.x}
          y2={svgSize.height}
          stroke={axisColor}
          strokeWidth={2}
        />
        
        {/* Axis labels */}
        <text x={svgSize.width - 10} y={center.y - 10} fill={axisColor} fontSize="12" textAnchor="end">+X</text>
        <text x={center.x + 10} y={20} fill={axisColor} fontSize="12">+Y</text>
        <text x={10} y={center.y - 10} fill={axisColor} fontSize="12">-X</text>
        <text x={center.x + 10} y={svgSize.height - 10} fill={axisColor} fontSize="12">-Y</text>
        
        {/* Center point */}
        <circle cx={center.x} cy={center.y} r={3} fill={axisColor} />
      </>
    )
  }

  return (
    <div className="min-h-screen bg-background p-8">
      <div className="max-w-6xl mx-auto">
        <h1 className="text-3xl font-bold mb-6">Laboratorio Virtual de Movimiento Circular Uniforme</h1>
        
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Visualization Panel */}
          <Card className="lg:col-span-2">
            <CardHeader>
              <div className="flex justify-between items-center">
                <CardTitle>Visualización</CardTitle>
                <div className="flex space-x-2">
                  <Button variant="outline" size="sm" onClick={addBall}>
                    <Plus className="h-4 w-4 mr-2" />
                    Añadir bolita
                  </Button>
                  <Button variant="outline" size="sm" onClick={removeBall} disabled={balls.length <= 1}>
                    <Minus className="h-4 w-4 mr-2" />
                    Quitar bolita
                  </Button>
                </div>
              </div>
            </CardHeader>
            <CardContent>
              <div className="relative h-96 border rounded-lg bg-gray-50">
                <svg className="w-full h-full">
                  {/* Cartesian plane */}
                  {renderCartesianPlane()}
                  
                  {/* Draw each ball's path */}
                  {balls.map(ball => !ball.isFree && (
                    <circle
                      key={`path-${ball.id}`}
                      cx={center.x}
                      cy={center.y}
                      r={ball.radius}
                      fill="none"
                      stroke={ball.color}
                      strokeWidth="1"
                      strokeDasharray="5,5"
                      strokeOpacity="0.5"
                    />
                  ))}
                  
                  {/* Draw each ball */}
                  {balls.map(ball => {
                    const position = getBallPosition(ball)
                    const velocityVector = getVelocityVector(ball)

                    return (
                      <g key={`ball-${ball.id}`}>
                        {/* Radius line (only for non-free balls) */}
                        {!ball.isFree && (
                          <line
                            x1={center.x}
                            y1={center.y}
                            x2={position.x}
                            y2={position.y}
                            stroke={ball.color}
                            strokeWidth="2"
                            strokeOpacity="0.5"
                          />
                        )}
                        
                        {/* Velocity vector */}
                        <line
                          x1={position.x}
                          y1={position.y}
                          x2={position.x + velocityVector.x * 0.5}
                          y2={position.y + velocityVector.y * 0.5}
                          stroke={ball.color}
                          strokeWidth="2"
                          markerEnd={`url(#arrowhead-${ball.id})`}
                        />
                        
                        {/* Ball */}
                        <circle
                          cx={position.x}
                          cy={position.y}
                          r="8"
                          fill={ball.color}
                        />
                        
                        {/* Ball ID label */}
                        <text
                          x={position.x + 12}
                          y={position.y + 5}
                          fill={ball.color}
                          fontSize="12"
                          fontWeight="bold"
                        >
                          {ball.id}
                        </text>
                      </g>
                    )
                  })}
                  
                  <defs>
                    {balls.map(ball => (
                      <marker
                        key={`marker-${ball.id}`}
                        id={`arrowhead-${ball.id}`}
                        markerWidth="10"
                        markerHeight="7"
                        refX="9"
                        refY="3.5"
                        orient="auto"
                      >
                        <polygon points="0 0, 10 3.5, 0 7" fill={ball.color} />
                      </marker>
                    ))}
                  </defs>
                </svg>
                
                {/* Controls overlay */}
                <div className="absolute bottom-4 left-0 right-0 flex justify-center space-x-4">
                  <Button onClick={() => setIsPlaying(!isPlaying)}>
                    {isPlaying ? <Pause className="mr-2 h-4 w-4" /> : <Play className="mr-2 h-4 w-4" />}
                    {isPlaying ? 'Pausar' : 'Iniciar'}
                  </Button>
                  <Button variant="outline" onClick={resetSimulation}>
                    <RefreshCw className="mr-2 h-4 w-4" />
                    Reiniciar
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
          
          {/* Controls Panel */}
          <Card>
            <CardHeader>
              <CardTitle>Controles</CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              <Button
                variant="outline"
                onClick={() => setShowFormulas(!showFormulas)}
                className="w-full"
              >
                {showFormulas ? 'Ocultar Fórmulas' : 'Mostrar Fórmulas'}
              </Button>

              {/* Ball controls */}
              <div className="space-y-6">
                {balls.map(ball => {
                  const calculations = getBallCalculations(ball)
                  
                  return (
                    <div key={`ball-controls-${ball.id}`} className="p-4 bg-gray-50 rounded-lg border">
                      <div className="flex items-center justify-between mb-3">
                        <div className="flex items-center">
                          <div 
                            className="w-4 h-4 rounded-full mr-2" 
                            style={{ backgroundColor: ball.color }}
                          />
                          <span className="font-medium">Bolita {ball.id}</span>
                          {ball.isFree && <span className="ml-2 text-xs text-gray-500">(liberada)</span>}
                        </div>
                        {!ball.isFree && (
                          <Button 
                            variant="outline" 
                            size="sm"
                            onClick={() => releaseBall(ball.id)}
                          >
                            Soltar
                          </Button>
                        )}
                      </div>
                      
                      {!ball.isFree && (
                        <div className="space-y-4">
                          <div>
                            <label className="block mb-1 text-xs text-gray-600">
                              Radio: {ball.radius} cm
                            </label>
                            <Slider
                              min={30}
                              max={150}
                              step={1}
                              value={[ball.radius]}
                              onValueChange={([value]) => updateBallRadius(ball.id, value)}
                              disabled={ball.isFree}
                            />
                          </div>
                          
                          <div>
                            <label className="block mb-1 text-xs text-gray-600">
                              Velocidad Angular: {ball.angularVelocity.toFixed(2)} rad/s
                            </label>
                            <Slider
                              min={0.1}
                              max={5}
                              step={0.1}
                              value={[ball.angularVelocity]}
                              onValueChange={([value]) => updateBallAngularVelocity(ball.id, value)}
                              disabled={ball.isFree}
                            />
                          </div>
                        </div>
                      )}
                      
                      <div className="mt-4 grid grid-cols-2 gap-2">
                        <div className="p-2 bg-white rounded">
                          <p className="text-xs text-gray-500">Ángulo (θ)</p>
                          <p className="font-bold">{calculations.angle.toFixed(2)} rad</p>
                        </div>
                        <div className="p-2 bg-white rounded">
                          <p className="text-xs text-gray-500">Velocidad Tangencial</p>
                          <p className="font-bold">{calculations.tangentialVelocity.toFixed(2)} cm/s</p>
                        </div>
                        <div className="p-2 bg-white rounded">
                          <p className="text-xs text-gray-500">Período (T)</p>
                          <p className="font-bold">{calculations.period.toFixed(2)} s</p>
                        </div>
                        <div className="p-2 bg-white rounded">
                          <p className="text-xs text-gray-500">Aceleración Centrípeta</p>
                          <p className="font-bold">{calculations.centripetalAcceleration.toFixed(2)} cm/s²</p>
                        </div>
                      </div>
                      
                      {ball.isFree && (
                        <div className="mt-2 text-xs text-gray-500">
                          Velocidad: {Math.sqrt(
                            ball.releaseVelocity.x**2 + 
                            ball.releaseVelocity.y**2
                          ).toFixed(1)} cm/s (constante)
                        </div>
                      )}
                    </div>
                  )
                })}
              </div>
            </CardContent>
          </Card>
        </div>
        
        {/* Formulas Panel */}
        {showFormulas && (
          <Card className="mt-8">
            <CardHeader>
              <CardTitle>Fórmulas del Movimiento Circular Uniforme</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="p-4 bg-gray-50 rounded-lg">
                <ul className="space-y-2">
                  <li className="flex items-start">
                    <span className="font-mono bg-gray-200 px-2 py-1 rounded mr-2">θ = ω × t</span>
                    <span>Ángulo en función del tiempo</span>
                  </li>
                  <li className="flex items-start">
                    <span className="font-mono bg-gray-200 px-2 py-1 rounded mr-2">T = 2π / ω</span>
                    <span>Período del movimiento</span>
                  </li>
                  <li className="flex items-start">
                    <span className="font-mono bg-gray-200 px-2 py-1 rounded mr-2">f = 1 / T</span>
                    <span>Frecuencia</span>
                  </li>
                  <li className="flex items-start">
                    <span className="font-mono bg-gray-200 px-2 py-1 rounded mr-2">v = r × ω</span>
                    <span>Velocidad tangencial</span>
                  </li>
                  <li className="flex items-start">
                    <span className="font-mono bg-gray-200 px-2 py-1 rounded mr-2">a = r × ω²</span>
                    <span>Aceleración centrípeta</span>
                  </li>
                </ul>
              </div>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  )
}
